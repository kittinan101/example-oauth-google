@startuml Google OAuth 2.0 Flow
!theme plain
skinparam backgroundColor #FFFFFF
skinparam sequenceMessageAlign center

title Google OAuth 2.0 Authorization Code Flow with Next.js

actor User
participant "Next.js App\n(Frontend)" as NextJS
participant "NextAuth.js\n(Middleware)" as NextAuth
participant "Google OAuth\nServer" as Google
participant "Next.js API\n(/api/auth)" as API
database "Session Store" as Session

== Authentication Initiation ==

User -> NextJS: Click "Sign in with Google"
activate NextJS

NextJS -> NextAuth: signIn('google')
activate NextAuth

NextAuth -> API: POST /api/auth/signin/google
activate API

API -> API: Generate state & code_verifier\n(PKCE)
API -> Session: Store state & verifier
activate Session
Session --> API: OK
deactivate Session

API --> NextAuth: Redirect URL with params
deactivate API

NextAuth --> NextJS: Redirect to Google
deactivate NextAuth
deactivate NextJS

== User Authentication at Google ==

NextJS -> Google: GET /o/oauth2/v2/auth\n?client_id=...\n&redirect_uri=...\n&response_type=code\n&scope=profile email\n&state=...
activate Google

Google -> User: Show Google Login Page
activate User

User -> Google: Enter credentials &\nGrant permissions
deactivate User

Google -> Google: Validate credentials\n& Generate auth code

== OAuth Callback ==

Google --> API: Redirect to callback\nGET /api/auth/callback/google\n?code=...&state=...
deactivate Google
activate API

API -> Session: Retrieve state & verifier
activate Session
Session --> API: state & code_verifier
deactivate Session

API -> API: Validate state\n(CSRF protection)

alt State validation fails
    API --> NextJS: Redirect to error page
    NextJS -> User: Show error message
else State validation succeeds

    == Token Exchange ==

    API -> Google: POST /token\n{\n  code: ...,\n  client_id: ...,\n  client_secret: ...,\n  redirect_uri: ...,\n  grant_type: authorization_code\n}
    activate Google

    Google -> Google: Validate authorization code

    Google --> API: {\n  access_token: ...,\n  refresh_token: ...,\n  id_token: ...,\n  expires_in: 3600\n}
    deactivate Google

    == User Profile Retrieval ==

    API -> Google: GET /oauth2/v2/userinfo\nAuthorization: Bearer {access_token}
    activate Google

    Google -> Google: Validate access token

    Google --> API: {\n  id: ...,\n  email: ...,\n  name: ...,\n  picture: ...\n}
    deactivate Google

    == Session Creation ==

    API -> NextAuth: Create user session
    activate NextAuth

    NextAuth -> NextAuth: Generate JWT token with:\n- User ID\n- Email\n- Name\n- Picture

    NextAuth -> Session: Store session
    activate Session
    Session --> NextAuth: OK
    deactivate Session

    NextAuth --> API: Session created
    deactivate NextAuth

    API --> NextJS: Redirect to /\nSet session cookie
    deactivate API

    NextJS -> User: Show authenticated page
end

== Accessing Protected Resources ==

User -> NextJS: Navigate to /profile
activate NextJS

NextJS -> NextAuth: getServerSession()
activate NextAuth

NextAuth -> Session: Get session by cookie
activate Session
Session --> NextAuth: Session data
deactivate Session

alt Session exists and valid
    NextAuth --> NextJS: User session
    deactivate NextAuth
    NextJS -> User: Display profile page\nwith user data
    deactivate NextJS
else Session invalid or expired
    NextAuth --> NextJS: null
    deactivate NextAuth
    NextJS -> User: Redirect to login
    deactivate NextJS
end

== Logout Flow ==

User -> NextJS: Click "Sign out"
activate NextJS

NextJS -> NextAuth: signOut()
activate NextAuth

NextAuth -> Session: Delete session
activate Session
Session --> NextAuth: OK
deactivate Session

NextAuth -> API: POST /api/auth/signout
activate API
API --> NextAuth: Clear session cookie
deactivate API

NextAuth --> NextJS: Redirect to /
deactivate NextAuth

NextJS -> User: Show logged out state
deactivate NextJS

@enduml
